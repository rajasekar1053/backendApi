
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model Productdetail
 * 
 */
export type Productdetail = $Result.DefaultSelection<Prisma.$ProductdetailPayload>
/**
 * Model Similarproducts
 * 
 */
export type Similarproducts = $Result.DefaultSelection<Prisma.$SimilarproductsPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Products
 * const products = await prisma.product.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Products
   * const products = await prisma.product.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs>;

  /**
   * `prisma.productdetail`: Exposes CRUD operations for the **Productdetail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Productdetails
    * const productdetails = await prisma.productdetail.findMany()
    * ```
    */
  get productdetail(): Prisma.ProductdetailDelegate<ExtArgs>;

  /**
   * `prisma.similarproducts`: Exposes CRUD operations for the **Similarproducts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Similarproducts
    * const similarproducts = await prisma.similarproducts.findMany()
    * ```
    */
  get similarproducts(): Prisma.SimilarproductsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.13.0
   * Query Engine version: b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Product: 'Product',
    Productdetail: 'Productdetail',
    Similarproducts: 'Similarproducts'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'product' | 'productdetail' | 'similarproducts'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      Productdetail: {
        payload: Prisma.$ProductdetailPayload<ExtArgs>
        fields: Prisma.ProductdetailFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductdetailFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductdetailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductdetailFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductdetailPayload>
          }
          findFirst: {
            args: Prisma.ProductdetailFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductdetailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductdetailFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductdetailPayload>
          }
          findMany: {
            args: Prisma.ProductdetailFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductdetailPayload>[]
          }
          create: {
            args: Prisma.ProductdetailCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductdetailPayload>
          }
          createMany: {
            args: Prisma.ProductdetailCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProductdetailDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductdetailPayload>
          }
          update: {
            args: Prisma.ProductdetailUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductdetailPayload>
          }
          deleteMany: {
            args: Prisma.ProductdetailDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProductdetailUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProductdetailUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductdetailPayload>
          }
          aggregate: {
            args: Prisma.ProductdetailAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProductdetail>
          }
          groupBy: {
            args: Prisma.ProductdetailGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductdetailGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductdetailCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductdetailCountAggregateOutputType> | number
          }
        }
      }
      Similarproducts: {
        payload: Prisma.$SimilarproductsPayload<ExtArgs>
        fields: Prisma.SimilarproductsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SimilarproductsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SimilarproductsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SimilarproductsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SimilarproductsPayload>
          }
          findFirst: {
            args: Prisma.SimilarproductsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SimilarproductsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SimilarproductsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SimilarproductsPayload>
          }
          findMany: {
            args: Prisma.SimilarproductsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SimilarproductsPayload>[]
          }
          create: {
            args: Prisma.SimilarproductsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SimilarproductsPayload>
          }
          createMany: {
            args: Prisma.SimilarproductsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SimilarproductsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SimilarproductsPayload>
          }
          update: {
            args: Prisma.SimilarproductsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SimilarproductsPayload>
          }
          deleteMany: {
            args: Prisma.SimilarproductsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SimilarproductsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SimilarproductsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SimilarproductsPayload>
          }
          aggregate: {
            args: Prisma.SimilarproductsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSimilarproducts>
          }
          groupBy: {
            args: Prisma.SimilarproductsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SimilarproductsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SimilarproductsCountArgs<ExtArgs>,
            result: $Utils.Optional<SimilarproductsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProductdetailCountOutputType
   */

  export type ProductdetailCountOutputType = {
    Similarproducts: number
  }

  export type ProductdetailCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Similarproducts?: boolean | ProductdetailCountOutputTypeCountSimilarproductsArgs
  }

  // Custom InputTypes
  /**
   * ProductdetailCountOutputType without action
   */
  export type ProductdetailCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductdetailCountOutputType
     */
    select?: ProductdetailCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductdetailCountOutputType without action
   */
  export type ProductdetailCountOutputTypeCountSimilarproductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SimilarproductsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    product_Id: number | null
    price: number | null
  }

  export type ProductSumAggregateOutputType = {
    product_Id: number | null
    price: number | null
  }

  export type ProductMinAggregateOutputType = {
    product_Id: number | null
    title: string | null
    brand: string | null
    price: number | null
    image_url: string | null
    rating: string | null
  }

  export type ProductMaxAggregateOutputType = {
    product_Id: number | null
    title: string | null
    brand: string | null
    price: number | null
    image_url: string | null
    rating: string | null
  }

  export type ProductCountAggregateOutputType = {
    product_Id: number
    title: number
    brand: number
    price: number
    image_url: number
    rating: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    product_Id?: true
    price?: true
  }

  export type ProductSumAggregateInputType = {
    product_Id?: true
    price?: true
  }

  export type ProductMinAggregateInputType = {
    product_Id?: true
    title?: true
    brand?: true
    price?: true
    image_url?: true
    rating?: true
  }

  export type ProductMaxAggregateInputType = {
    product_Id?: true
    title?: true
    brand?: true
    price?: true
    image_url?: true
    rating?: true
  }

  export type ProductCountAggregateInputType = {
    product_Id?: true
    title?: true
    brand?: true
    price?: true
    image_url?: true
    rating?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    product_Id: number
    title: string
    brand: string
    price: number
    image_url: string
    rating: string
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    product_Id?: boolean
    title?: boolean
    brand?: boolean
    price?: boolean
    image_url?: boolean
    rating?: boolean
    Productdetail?: boolean | Product$ProductdetailArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectScalar = {
    product_Id?: boolean
    title?: boolean
    brand?: boolean
    price?: boolean
    image_url?: boolean
    rating?: boolean
  }


  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Productdetail?: boolean | Product$ProductdetailArgs<ExtArgs>
  }


  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      Productdetail: Prisma.$ProductdetailPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      product_Id: number
      title: string
      brand: string
      price: number
      image_url: string
      rating: string
    }, ExtArgs["result"]["product"]>
    composites: {}
  }


  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Product that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `product_Id`
     * const productWithProduct_IdOnly = await prisma.product.findMany({ select: { product_Id: true } })
     * 
    **/
    findMany<T extends ProductFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
    **/
    create<T extends ProductCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductCreateArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Products.
     *     @param {ProductCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const product = await prisma.product.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
    **/
    delete<T extends ProductDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
    **/
    upsert<T extends ProductUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Productdetail<T extends Product$ProductdetailArgs<ExtArgs> = {}>(args?: Subset<T, Product$ProductdetailArgs<ExtArgs>>): Prisma__ProductdetailClient<$Result.GetResult<Prisma.$ProductdetailPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Product model
   */ 
  interface ProductFieldRefs {
    readonly product_Id: FieldRef<"Product", 'Int'>
    readonly title: FieldRef<"Product", 'String'>
    readonly brand: FieldRef<"Product", 'String'>
    readonly price: FieldRef<"Product", 'Int'>
    readonly image_url: FieldRef<"Product", 'String'>
    readonly rating: FieldRef<"Product", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
  }

  /**
   * Product.Productdetail
   */
  export type Product$ProductdetailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Productdetail
     */
    select?: ProductdetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductdetailInclude<ExtArgs> | null
    where?: ProductdetailWhereInput
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
  }


  /**
   * Model Productdetail
   */

  export type AggregateProductdetail = {
    _count: ProductdetailCountAggregateOutputType | null
    _avg: ProductdetailAvgAggregateOutputType | null
    _sum: ProductdetailSumAggregateOutputType | null
    _min: ProductdetailMinAggregateOutputType | null
    _max: ProductdetailMaxAggregateOutputType | null
  }

  export type ProductdetailAvgAggregateOutputType = {
    productsdetailId: number | null
    price: number | null
    total_reviews: number | null
    product_Id: number | null
  }

  export type ProductdetailSumAggregateOutputType = {
    productsdetailId: number | null
    price: number | null
    total_reviews: number | null
    product_Id: number | null
  }

  export type ProductdetailMinAggregateOutputType = {
    productsdetailId: number | null
    title: string | null
    image_url: string | null
    style: string | null
    rating: string | null
    brand: string | null
    price: number | null
    description: string | null
    total_reviews: number | null
    availability: string | null
    product_Id: number | null
  }

  export type ProductdetailMaxAggregateOutputType = {
    productsdetailId: number | null
    title: string | null
    image_url: string | null
    style: string | null
    rating: string | null
    brand: string | null
    price: number | null
    description: string | null
    total_reviews: number | null
    availability: string | null
    product_Id: number | null
  }

  export type ProductdetailCountAggregateOutputType = {
    productsdetailId: number
    title: number
    image_url: number
    style: number
    rating: number
    brand: number
    price: number
    description: number
    total_reviews: number
    availability: number
    product_Id: number
    _all: number
  }


  export type ProductdetailAvgAggregateInputType = {
    productsdetailId?: true
    price?: true
    total_reviews?: true
    product_Id?: true
  }

  export type ProductdetailSumAggregateInputType = {
    productsdetailId?: true
    price?: true
    total_reviews?: true
    product_Id?: true
  }

  export type ProductdetailMinAggregateInputType = {
    productsdetailId?: true
    title?: true
    image_url?: true
    style?: true
    rating?: true
    brand?: true
    price?: true
    description?: true
    total_reviews?: true
    availability?: true
    product_Id?: true
  }

  export type ProductdetailMaxAggregateInputType = {
    productsdetailId?: true
    title?: true
    image_url?: true
    style?: true
    rating?: true
    brand?: true
    price?: true
    description?: true
    total_reviews?: true
    availability?: true
    product_Id?: true
  }

  export type ProductdetailCountAggregateInputType = {
    productsdetailId?: true
    title?: true
    image_url?: true
    style?: true
    rating?: true
    brand?: true
    price?: true
    description?: true
    total_reviews?: true
    availability?: true
    product_Id?: true
    _all?: true
  }

  export type ProductdetailAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Productdetail to aggregate.
     */
    where?: ProductdetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Productdetails to fetch.
     */
    orderBy?: ProductdetailOrderByWithRelationInput | ProductdetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductdetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Productdetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Productdetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Productdetails
    **/
    _count?: true | ProductdetailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductdetailAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductdetailSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductdetailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductdetailMaxAggregateInputType
  }

  export type GetProductdetailAggregateType<T extends ProductdetailAggregateArgs> = {
        [P in keyof T & keyof AggregateProductdetail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductdetail[P]>
      : GetScalarType<T[P], AggregateProductdetail[P]>
  }




  export type ProductdetailGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductdetailWhereInput
    orderBy?: ProductdetailOrderByWithAggregationInput | ProductdetailOrderByWithAggregationInput[]
    by: ProductdetailScalarFieldEnum[] | ProductdetailScalarFieldEnum
    having?: ProductdetailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductdetailCountAggregateInputType | true
    _avg?: ProductdetailAvgAggregateInputType
    _sum?: ProductdetailSumAggregateInputType
    _min?: ProductdetailMinAggregateInputType
    _max?: ProductdetailMaxAggregateInputType
  }

  export type ProductdetailGroupByOutputType = {
    productsdetailId: number
    title: string
    image_url: string
    style: string
    rating: string
    brand: string
    price: number
    description: string
    total_reviews: number
    availability: string
    product_Id: number
    _count: ProductdetailCountAggregateOutputType | null
    _avg: ProductdetailAvgAggregateOutputType | null
    _sum: ProductdetailSumAggregateOutputType | null
    _min: ProductdetailMinAggregateOutputType | null
    _max: ProductdetailMaxAggregateOutputType | null
  }

  type GetProductdetailGroupByPayload<T extends ProductdetailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductdetailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductdetailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductdetailGroupByOutputType[P]>
            : GetScalarType<T[P], ProductdetailGroupByOutputType[P]>
        }
      >
    >


  export type ProductdetailSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    productsdetailId?: boolean
    title?: boolean
    image_url?: boolean
    style?: boolean
    rating?: boolean
    brand?: boolean
    price?: boolean
    description?: boolean
    total_reviews?: boolean
    availability?: boolean
    product_Id?: boolean
    Product?: boolean | Productdetail$ProductArgs<ExtArgs>
    Similarproducts?: boolean | Productdetail$SimilarproductsArgs<ExtArgs>
    _count?: boolean | ProductdetailCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productdetail"]>

  export type ProductdetailSelectScalar = {
    productsdetailId?: boolean
    title?: boolean
    image_url?: boolean
    style?: boolean
    rating?: boolean
    brand?: boolean
    price?: boolean
    description?: boolean
    total_reviews?: boolean
    availability?: boolean
    product_Id?: boolean
  }


  export type ProductdetailInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Product?: boolean | Productdetail$ProductArgs<ExtArgs>
    Similarproducts?: boolean | Productdetail$SimilarproductsArgs<ExtArgs>
    _count?: boolean | ProductdetailCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ProductdetailPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Productdetail"
    objects: {
      Product: Prisma.$ProductPayload<ExtArgs> | null
      Similarproducts: Prisma.$SimilarproductsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      productsdetailId: number
      title: string
      image_url: string
      style: string
      rating: string
      brand: string
      price: number
      description: string
      total_reviews: number
      availability: string
      product_Id: number
    }, ExtArgs["result"]["productdetail"]>
    composites: {}
  }


  type ProductdetailGetPayload<S extends boolean | null | undefined | ProductdetailDefaultArgs> = $Result.GetResult<Prisma.$ProductdetailPayload, S>

  type ProductdetailCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductdetailFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductdetailCountAggregateInputType | true
    }

  export interface ProductdetailDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Productdetail'], meta: { name: 'Productdetail' } }
    /**
     * Find zero or one Productdetail that matches the filter.
     * @param {ProductdetailFindUniqueArgs} args - Arguments to find a Productdetail
     * @example
     * // Get one Productdetail
     * const productdetail = await prisma.productdetail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductdetailFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProductdetailFindUniqueArgs<ExtArgs>>
    ): Prisma__ProductdetailClient<$Result.GetResult<Prisma.$ProductdetailPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Productdetail that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProductdetailFindUniqueOrThrowArgs} args - Arguments to find a Productdetail
     * @example
     * // Get one Productdetail
     * const productdetail = await prisma.productdetail.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProductdetailFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductdetailFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProductdetailClient<$Result.GetResult<Prisma.$ProductdetailPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Productdetail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductdetailFindFirstArgs} args - Arguments to find a Productdetail
     * @example
     * // Get one Productdetail
     * const productdetail = await prisma.productdetail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductdetailFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductdetailFindFirstArgs<ExtArgs>>
    ): Prisma__ProductdetailClient<$Result.GetResult<Prisma.$ProductdetailPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Productdetail that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductdetailFindFirstOrThrowArgs} args - Arguments to find a Productdetail
     * @example
     * // Get one Productdetail
     * const productdetail = await prisma.productdetail.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProductdetailFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductdetailFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProductdetailClient<$Result.GetResult<Prisma.$ProductdetailPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Productdetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductdetailFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Productdetails
     * const productdetails = await prisma.productdetail.findMany()
     * 
     * // Get first 10 Productdetails
     * const productdetails = await prisma.productdetail.findMany({ take: 10 })
     * 
     * // Only select the `productsdetailId`
     * const productdetailWithProductsdetailIdOnly = await prisma.productdetail.findMany({ select: { productsdetailId: true } })
     * 
    **/
    findMany<T extends ProductdetailFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductdetailFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductdetailPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Productdetail.
     * @param {ProductdetailCreateArgs} args - Arguments to create a Productdetail.
     * @example
     * // Create one Productdetail
     * const Productdetail = await prisma.productdetail.create({
     *   data: {
     *     // ... data to create a Productdetail
     *   }
     * })
     * 
    **/
    create<T extends ProductdetailCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductdetailCreateArgs<ExtArgs>>
    ): Prisma__ProductdetailClient<$Result.GetResult<Prisma.$ProductdetailPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Productdetails.
     *     @param {ProductdetailCreateManyArgs} args - Arguments to create many Productdetails.
     *     @example
     *     // Create many Productdetails
     *     const productdetail = await prisma.productdetail.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductdetailCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductdetailCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Productdetail.
     * @param {ProductdetailDeleteArgs} args - Arguments to delete one Productdetail.
     * @example
     * // Delete one Productdetail
     * const Productdetail = await prisma.productdetail.delete({
     *   where: {
     *     // ... filter to delete one Productdetail
     *   }
     * })
     * 
    **/
    delete<T extends ProductdetailDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProductdetailDeleteArgs<ExtArgs>>
    ): Prisma__ProductdetailClient<$Result.GetResult<Prisma.$ProductdetailPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Productdetail.
     * @param {ProductdetailUpdateArgs} args - Arguments to update one Productdetail.
     * @example
     * // Update one Productdetail
     * const productdetail = await prisma.productdetail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductdetailUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductdetailUpdateArgs<ExtArgs>>
    ): Prisma__ProductdetailClient<$Result.GetResult<Prisma.$ProductdetailPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Productdetails.
     * @param {ProductdetailDeleteManyArgs} args - Arguments to filter Productdetails to delete.
     * @example
     * // Delete a few Productdetails
     * const { count } = await prisma.productdetail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductdetailDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductdetailDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Productdetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductdetailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Productdetails
     * const productdetail = await prisma.productdetail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductdetailUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProductdetailUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Productdetail.
     * @param {ProductdetailUpsertArgs} args - Arguments to update or create a Productdetail.
     * @example
     * // Update or create a Productdetail
     * const productdetail = await prisma.productdetail.upsert({
     *   create: {
     *     // ... data to create a Productdetail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Productdetail we want to update
     *   }
     * })
    **/
    upsert<T extends ProductdetailUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProductdetailUpsertArgs<ExtArgs>>
    ): Prisma__ProductdetailClient<$Result.GetResult<Prisma.$ProductdetailPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Productdetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductdetailCountArgs} args - Arguments to filter Productdetails to count.
     * @example
     * // Count the number of Productdetails
     * const count = await prisma.productdetail.count({
     *   where: {
     *     // ... the filter for the Productdetails we want to count
     *   }
     * })
    **/
    count<T extends ProductdetailCountArgs>(
      args?: Subset<T, ProductdetailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductdetailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Productdetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductdetailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductdetailAggregateArgs>(args: Subset<T, ProductdetailAggregateArgs>): Prisma.PrismaPromise<GetProductdetailAggregateType<T>>

    /**
     * Group by Productdetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductdetailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductdetailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductdetailGroupByArgs['orderBy'] }
        : { orderBy?: ProductdetailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductdetailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductdetailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Productdetail model
   */
  readonly fields: ProductdetailFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Productdetail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductdetailClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Product<T extends Productdetail$ProductArgs<ExtArgs> = {}>(args?: Subset<T, Productdetail$ProductArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Similarproducts<T extends Productdetail$SimilarproductsArgs<ExtArgs> = {}>(args?: Subset<T, Productdetail$SimilarproductsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SimilarproductsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Productdetail model
   */ 
  interface ProductdetailFieldRefs {
    readonly productsdetailId: FieldRef<"Productdetail", 'Int'>
    readonly title: FieldRef<"Productdetail", 'String'>
    readonly image_url: FieldRef<"Productdetail", 'String'>
    readonly style: FieldRef<"Productdetail", 'String'>
    readonly rating: FieldRef<"Productdetail", 'String'>
    readonly brand: FieldRef<"Productdetail", 'String'>
    readonly price: FieldRef<"Productdetail", 'Int'>
    readonly description: FieldRef<"Productdetail", 'String'>
    readonly total_reviews: FieldRef<"Productdetail", 'Int'>
    readonly availability: FieldRef<"Productdetail", 'String'>
    readonly product_Id: FieldRef<"Productdetail", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Productdetail findUnique
   */
  export type ProductdetailFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Productdetail
     */
    select?: ProductdetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductdetailInclude<ExtArgs> | null
    /**
     * Filter, which Productdetail to fetch.
     */
    where: ProductdetailWhereUniqueInput
  }

  /**
   * Productdetail findUniqueOrThrow
   */
  export type ProductdetailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Productdetail
     */
    select?: ProductdetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductdetailInclude<ExtArgs> | null
    /**
     * Filter, which Productdetail to fetch.
     */
    where: ProductdetailWhereUniqueInput
  }

  /**
   * Productdetail findFirst
   */
  export type ProductdetailFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Productdetail
     */
    select?: ProductdetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductdetailInclude<ExtArgs> | null
    /**
     * Filter, which Productdetail to fetch.
     */
    where?: ProductdetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Productdetails to fetch.
     */
    orderBy?: ProductdetailOrderByWithRelationInput | ProductdetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Productdetails.
     */
    cursor?: ProductdetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Productdetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Productdetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Productdetails.
     */
    distinct?: ProductdetailScalarFieldEnum | ProductdetailScalarFieldEnum[]
  }

  /**
   * Productdetail findFirstOrThrow
   */
  export type ProductdetailFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Productdetail
     */
    select?: ProductdetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductdetailInclude<ExtArgs> | null
    /**
     * Filter, which Productdetail to fetch.
     */
    where?: ProductdetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Productdetails to fetch.
     */
    orderBy?: ProductdetailOrderByWithRelationInput | ProductdetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Productdetails.
     */
    cursor?: ProductdetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Productdetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Productdetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Productdetails.
     */
    distinct?: ProductdetailScalarFieldEnum | ProductdetailScalarFieldEnum[]
  }

  /**
   * Productdetail findMany
   */
  export type ProductdetailFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Productdetail
     */
    select?: ProductdetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductdetailInclude<ExtArgs> | null
    /**
     * Filter, which Productdetails to fetch.
     */
    where?: ProductdetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Productdetails to fetch.
     */
    orderBy?: ProductdetailOrderByWithRelationInput | ProductdetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Productdetails.
     */
    cursor?: ProductdetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Productdetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Productdetails.
     */
    skip?: number
    distinct?: ProductdetailScalarFieldEnum | ProductdetailScalarFieldEnum[]
  }

  /**
   * Productdetail create
   */
  export type ProductdetailCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Productdetail
     */
    select?: ProductdetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductdetailInclude<ExtArgs> | null
    /**
     * The data needed to create a Productdetail.
     */
    data: XOR<ProductdetailCreateInput, ProductdetailUncheckedCreateInput>
  }

  /**
   * Productdetail createMany
   */
  export type ProductdetailCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Productdetails.
     */
    data: ProductdetailCreateManyInput | ProductdetailCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Productdetail update
   */
  export type ProductdetailUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Productdetail
     */
    select?: ProductdetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductdetailInclude<ExtArgs> | null
    /**
     * The data needed to update a Productdetail.
     */
    data: XOR<ProductdetailUpdateInput, ProductdetailUncheckedUpdateInput>
    /**
     * Choose, which Productdetail to update.
     */
    where: ProductdetailWhereUniqueInput
  }

  /**
   * Productdetail updateMany
   */
  export type ProductdetailUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Productdetails.
     */
    data: XOR<ProductdetailUpdateManyMutationInput, ProductdetailUncheckedUpdateManyInput>
    /**
     * Filter which Productdetails to update
     */
    where?: ProductdetailWhereInput
  }

  /**
   * Productdetail upsert
   */
  export type ProductdetailUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Productdetail
     */
    select?: ProductdetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductdetailInclude<ExtArgs> | null
    /**
     * The filter to search for the Productdetail to update in case it exists.
     */
    where: ProductdetailWhereUniqueInput
    /**
     * In case the Productdetail found by the `where` argument doesn't exist, create a new Productdetail with this data.
     */
    create: XOR<ProductdetailCreateInput, ProductdetailUncheckedCreateInput>
    /**
     * In case the Productdetail was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductdetailUpdateInput, ProductdetailUncheckedUpdateInput>
  }

  /**
   * Productdetail delete
   */
  export type ProductdetailDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Productdetail
     */
    select?: ProductdetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductdetailInclude<ExtArgs> | null
    /**
     * Filter which Productdetail to delete.
     */
    where: ProductdetailWhereUniqueInput
  }

  /**
   * Productdetail deleteMany
   */
  export type ProductdetailDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Productdetails to delete
     */
    where?: ProductdetailWhereInput
  }

  /**
   * Productdetail.Product
   */
  export type Productdetail$ProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
  }

  /**
   * Productdetail.Similarproducts
   */
  export type Productdetail$SimilarproductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Similarproducts
     */
    select?: SimilarproductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimilarproductsInclude<ExtArgs> | null
    where?: SimilarproductsWhereInput
    orderBy?: SimilarproductsOrderByWithRelationInput | SimilarproductsOrderByWithRelationInput[]
    cursor?: SimilarproductsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SimilarproductsScalarFieldEnum | SimilarproductsScalarFieldEnum[]
  }

  /**
   * Productdetail without action
   */
  export type ProductdetailDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Productdetail
     */
    select?: ProductdetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductdetailInclude<ExtArgs> | null
  }


  /**
   * Model Similarproducts
   */

  export type AggregateSimilarproducts = {
    _count: SimilarproductsCountAggregateOutputType | null
    _avg: SimilarproductsAvgAggregateOutputType | null
    _sum: SimilarproductsSumAggregateOutputType | null
    _min: SimilarproductsMinAggregateOutputType | null
    _max: SimilarproductsMaxAggregateOutputType | null
  }

  export type SimilarproductsAvgAggregateOutputType = {
    id: number | null
    price: number | null
    total_reviews: number | null
    productsdetailId: number | null
    product_Id: number | null
  }

  export type SimilarproductsSumAggregateOutputType = {
    id: number | null
    price: number | null
    total_reviews: number | null
    productsdetailId: number | null
    product_Id: number | null
  }

  export type SimilarproductsMinAggregateOutputType = {
    id: number | null
    title: string | null
    image_url: string | null
    style: string | null
    rating: string | null
    price: number | null
    brand: string | null
    description: string | null
    total_reviews: number | null
    availability: string | null
    productsdetailId: number | null
    product_Id: number | null
  }

  export type SimilarproductsMaxAggregateOutputType = {
    id: number | null
    title: string | null
    image_url: string | null
    style: string | null
    rating: string | null
    price: number | null
    brand: string | null
    description: string | null
    total_reviews: number | null
    availability: string | null
    productsdetailId: number | null
    product_Id: number | null
  }

  export type SimilarproductsCountAggregateOutputType = {
    id: number
    title: number
    image_url: number
    style: number
    rating: number
    price: number
    brand: number
    description: number
    total_reviews: number
    availability: number
    productsdetailId: number
    product_Id: number
    _all: number
  }


  export type SimilarproductsAvgAggregateInputType = {
    id?: true
    price?: true
    total_reviews?: true
    productsdetailId?: true
    product_Id?: true
  }

  export type SimilarproductsSumAggregateInputType = {
    id?: true
    price?: true
    total_reviews?: true
    productsdetailId?: true
    product_Id?: true
  }

  export type SimilarproductsMinAggregateInputType = {
    id?: true
    title?: true
    image_url?: true
    style?: true
    rating?: true
    price?: true
    brand?: true
    description?: true
    total_reviews?: true
    availability?: true
    productsdetailId?: true
    product_Id?: true
  }

  export type SimilarproductsMaxAggregateInputType = {
    id?: true
    title?: true
    image_url?: true
    style?: true
    rating?: true
    price?: true
    brand?: true
    description?: true
    total_reviews?: true
    availability?: true
    productsdetailId?: true
    product_Id?: true
  }

  export type SimilarproductsCountAggregateInputType = {
    id?: true
    title?: true
    image_url?: true
    style?: true
    rating?: true
    price?: true
    brand?: true
    description?: true
    total_reviews?: true
    availability?: true
    productsdetailId?: true
    product_Id?: true
    _all?: true
  }

  export type SimilarproductsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Similarproducts to aggregate.
     */
    where?: SimilarproductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Similarproducts to fetch.
     */
    orderBy?: SimilarproductsOrderByWithRelationInput | SimilarproductsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SimilarproductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Similarproducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Similarproducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Similarproducts
    **/
    _count?: true | SimilarproductsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SimilarproductsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SimilarproductsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SimilarproductsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SimilarproductsMaxAggregateInputType
  }

  export type GetSimilarproductsAggregateType<T extends SimilarproductsAggregateArgs> = {
        [P in keyof T & keyof AggregateSimilarproducts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSimilarproducts[P]>
      : GetScalarType<T[P], AggregateSimilarproducts[P]>
  }




  export type SimilarproductsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SimilarproductsWhereInput
    orderBy?: SimilarproductsOrderByWithAggregationInput | SimilarproductsOrderByWithAggregationInput[]
    by: SimilarproductsScalarFieldEnum[] | SimilarproductsScalarFieldEnum
    having?: SimilarproductsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SimilarproductsCountAggregateInputType | true
    _avg?: SimilarproductsAvgAggregateInputType
    _sum?: SimilarproductsSumAggregateInputType
    _min?: SimilarproductsMinAggregateInputType
    _max?: SimilarproductsMaxAggregateInputType
  }

  export type SimilarproductsGroupByOutputType = {
    id: number
    title: string
    image_url: string
    style: string
    rating: string
    price: number
    brand: string
    description: string
    total_reviews: number
    availability: string
    productsdetailId: number
    product_Id: number
    _count: SimilarproductsCountAggregateOutputType | null
    _avg: SimilarproductsAvgAggregateOutputType | null
    _sum: SimilarproductsSumAggregateOutputType | null
    _min: SimilarproductsMinAggregateOutputType | null
    _max: SimilarproductsMaxAggregateOutputType | null
  }

  type GetSimilarproductsGroupByPayload<T extends SimilarproductsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SimilarproductsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SimilarproductsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SimilarproductsGroupByOutputType[P]>
            : GetScalarType<T[P], SimilarproductsGroupByOutputType[P]>
        }
      >
    >


  export type SimilarproductsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    image_url?: boolean
    style?: boolean
    rating?: boolean
    price?: boolean
    brand?: boolean
    description?: boolean
    total_reviews?: boolean
    availability?: boolean
    productsdetailId?: boolean
    product_Id?: boolean
    Product?: boolean | Similarproducts$ProductArgs<ExtArgs>
  }, ExtArgs["result"]["similarproducts"]>

  export type SimilarproductsSelectScalar = {
    id?: boolean
    title?: boolean
    image_url?: boolean
    style?: boolean
    rating?: boolean
    price?: boolean
    brand?: boolean
    description?: boolean
    total_reviews?: boolean
    availability?: boolean
    productsdetailId?: boolean
    product_Id?: boolean
  }


  export type SimilarproductsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Product?: boolean | Similarproducts$ProductArgs<ExtArgs>
  }


  export type $SimilarproductsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Similarproducts"
    objects: {
      Product: Prisma.$ProductdetailPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      image_url: string
      style: string
      rating: string
      price: number
      brand: string
      description: string
      total_reviews: number
      availability: string
      productsdetailId: number
      product_Id: number
    }, ExtArgs["result"]["similarproducts"]>
    composites: {}
  }


  type SimilarproductsGetPayload<S extends boolean | null | undefined | SimilarproductsDefaultArgs> = $Result.GetResult<Prisma.$SimilarproductsPayload, S>

  type SimilarproductsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SimilarproductsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SimilarproductsCountAggregateInputType | true
    }

  export interface SimilarproductsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Similarproducts'], meta: { name: 'Similarproducts' } }
    /**
     * Find zero or one Similarproducts that matches the filter.
     * @param {SimilarproductsFindUniqueArgs} args - Arguments to find a Similarproducts
     * @example
     * // Get one Similarproducts
     * const similarproducts = await prisma.similarproducts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SimilarproductsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SimilarproductsFindUniqueArgs<ExtArgs>>
    ): Prisma__SimilarproductsClient<$Result.GetResult<Prisma.$SimilarproductsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Similarproducts that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SimilarproductsFindUniqueOrThrowArgs} args - Arguments to find a Similarproducts
     * @example
     * // Get one Similarproducts
     * const similarproducts = await prisma.similarproducts.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SimilarproductsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SimilarproductsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SimilarproductsClient<$Result.GetResult<Prisma.$SimilarproductsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Similarproducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimilarproductsFindFirstArgs} args - Arguments to find a Similarproducts
     * @example
     * // Get one Similarproducts
     * const similarproducts = await prisma.similarproducts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SimilarproductsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SimilarproductsFindFirstArgs<ExtArgs>>
    ): Prisma__SimilarproductsClient<$Result.GetResult<Prisma.$SimilarproductsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Similarproducts that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimilarproductsFindFirstOrThrowArgs} args - Arguments to find a Similarproducts
     * @example
     * // Get one Similarproducts
     * const similarproducts = await prisma.similarproducts.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SimilarproductsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SimilarproductsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SimilarproductsClient<$Result.GetResult<Prisma.$SimilarproductsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Similarproducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimilarproductsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Similarproducts
     * const similarproducts = await prisma.similarproducts.findMany()
     * 
     * // Get first 10 Similarproducts
     * const similarproducts = await prisma.similarproducts.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const similarproductsWithIdOnly = await prisma.similarproducts.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SimilarproductsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SimilarproductsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SimilarproductsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Similarproducts.
     * @param {SimilarproductsCreateArgs} args - Arguments to create a Similarproducts.
     * @example
     * // Create one Similarproducts
     * const Similarproducts = await prisma.similarproducts.create({
     *   data: {
     *     // ... data to create a Similarproducts
     *   }
     * })
     * 
    **/
    create<T extends SimilarproductsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SimilarproductsCreateArgs<ExtArgs>>
    ): Prisma__SimilarproductsClient<$Result.GetResult<Prisma.$SimilarproductsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Similarproducts.
     *     @param {SimilarproductsCreateManyArgs} args - Arguments to create many Similarproducts.
     *     @example
     *     // Create many Similarproducts
     *     const similarproducts = await prisma.similarproducts.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SimilarproductsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SimilarproductsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Similarproducts.
     * @param {SimilarproductsDeleteArgs} args - Arguments to delete one Similarproducts.
     * @example
     * // Delete one Similarproducts
     * const Similarproducts = await prisma.similarproducts.delete({
     *   where: {
     *     // ... filter to delete one Similarproducts
     *   }
     * })
     * 
    **/
    delete<T extends SimilarproductsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SimilarproductsDeleteArgs<ExtArgs>>
    ): Prisma__SimilarproductsClient<$Result.GetResult<Prisma.$SimilarproductsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Similarproducts.
     * @param {SimilarproductsUpdateArgs} args - Arguments to update one Similarproducts.
     * @example
     * // Update one Similarproducts
     * const similarproducts = await prisma.similarproducts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SimilarproductsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SimilarproductsUpdateArgs<ExtArgs>>
    ): Prisma__SimilarproductsClient<$Result.GetResult<Prisma.$SimilarproductsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Similarproducts.
     * @param {SimilarproductsDeleteManyArgs} args - Arguments to filter Similarproducts to delete.
     * @example
     * // Delete a few Similarproducts
     * const { count } = await prisma.similarproducts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SimilarproductsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SimilarproductsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Similarproducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimilarproductsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Similarproducts
     * const similarproducts = await prisma.similarproducts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SimilarproductsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SimilarproductsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Similarproducts.
     * @param {SimilarproductsUpsertArgs} args - Arguments to update or create a Similarproducts.
     * @example
     * // Update or create a Similarproducts
     * const similarproducts = await prisma.similarproducts.upsert({
     *   create: {
     *     // ... data to create a Similarproducts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Similarproducts we want to update
     *   }
     * })
    **/
    upsert<T extends SimilarproductsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SimilarproductsUpsertArgs<ExtArgs>>
    ): Prisma__SimilarproductsClient<$Result.GetResult<Prisma.$SimilarproductsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Similarproducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimilarproductsCountArgs} args - Arguments to filter Similarproducts to count.
     * @example
     * // Count the number of Similarproducts
     * const count = await prisma.similarproducts.count({
     *   where: {
     *     // ... the filter for the Similarproducts we want to count
     *   }
     * })
    **/
    count<T extends SimilarproductsCountArgs>(
      args?: Subset<T, SimilarproductsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SimilarproductsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Similarproducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimilarproductsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SimilarproductsAggregateArgs>(args: Subset<T, SimilarproductsAggregateArgs>): Prisma.PrismaPromise<GetSimilarproductsAggregateType<T>>

    /**
     * Group by Similarproducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimilarproductsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SimilarproductsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SimilarproductsGroupByArgs['orderBy'] }
        : { orderBy?: SimilarproductsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SimilarproductsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSimilarproductsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Similarproducts model
   */
  readonly fields: SimilarproductsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Similarproducts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SimilarproductsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Product<T extends Similarproducts$ProductArgs<ExtArgs> = {}>(args?: Subset<T, Similarproducts$ProductArgs<ExtArgs>>): Prisma__ProductdetailClient<$Result.GetResult<Prisma.$ProductdetailPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Similarproducts model
   */ 
  interface SimilarproductsFieldRefs {
    readonly id: FieldRef<"Similarproducts", 'Int'>
    readonly title: FieldRef<"Similarproducts", 'String'>
    readonly image_url: FieldRef<"Similarproducts", 'String'>
    readonly style: FieldRef<"Similarproducts", 'String'>
    readonly rating: FieldRef<"Similarproducts", 'String'>
    readonly price: FieldRef<"Similarproducts", 'Int'>
    readonly brand: FieldRef<"Similarproducts", 'String'>
    readonly description: FieldRef<"Similarproducts", 'String'>
    readonly total_reviews: FieldRef<"Similarproducts", 'Int'>
    readonly availability: FieldRef<"Similarproducts", 'String'>
    readonly productsdetailId: FieldRef<"Similarproducts", 'Int'>
    readonly product_Id: FieldRef<"Similarproducts", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Similarproducts findUnique
   */
  export type SimilarproductsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Similarproducts
     */
    select?: SimilarproductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimilarproductsInclude<ExtArgs> | null
    /**
     * Filter, which Similarproducts to fetch.
     */
    where: SimilarproductsWhereUniqueInput
  }

  /**
   * Similarproducts findUniqueOrThrow
   */
  export type SimilarproductsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Similarproducts
     */
    select?: SimilarproductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimilarproductsInclude<ExtArgs> | null
    /**
     * Filter, which Similarproducts to fetch.
     */
    where: SimilarproductsWhereUniqueInput
  }

  /**
   * Similarproducts findFirst
   */
  export type SimilarproductsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Similarproducts
     */
    select?: SimilarproductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimilarproductsInclude<ExtArgs> | null
    /**
     * Filter, which Similarproducts to fetch.
     */
    where?: SimilarproductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Similarproducts to fetch.
     */
    orderBy?: SimilarproductsOrderByWithRelationInput | SimilarproductsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Similarproducts.
     */
    cursor?: SimilarproductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Similarproducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Similarproducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Similarproducts.
     */
    distinct?: SimilarproductsScalarFieldEnum | SimilarproductsScalarFieldEnum[]
  }

  /**
   * Similarproducts findFirstOrThrow
   */
  export type SimilarproductsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Similarproducts
     */
    select?: SimilarproductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimilarproductsInclude<ExtArgs> | null
    /**
     * Filter, which Similarproducts to fetch.
     */
    where?: SimilarproductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Similarproducts to fetch.
     */
    orderBy?: SimilarproductsOrderByWithRelationInput | SimilarproductsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Similarproducts.
     */
    cursor?: SimilarproductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Similarproducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Similarproducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Similarproducts.
     */
    distinct?: SimilarproductsScalarFieldEnum | SimilarproductsScalarFieldEnum[]
  }

  /**
   * Similarproducts findMany
   */
  export type SimilarproductsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Similarproducts
     */
    select?: SimilarproductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimilarproductsInclude<ExtArgs> | null
    /**
     * Filter, which Similarproducts to fetch.
     */
    where?: SimilarproductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Similarproducts to fetch.
     */
    orderBy?: SimilarproductsOrderByWithRelationInput | SimilarproductsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Similarproducts.
     */
    cursor?: SimilarproductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Similarproducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Similarproducts.
     */
    skip?: number
    distinct?: SimilarproductsScalarFieldEnum | SimilarproductsScalarFieldEnum[]
  }

  /**
   * Similarproducts create
   */
  export type SimilarproductsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Similarproducts
     */
    select?: SimilarproductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimilarproductsInclude<ExtArgs> | null
    /**
     * The data needed to create a Similarproducts.
     */
    data: XOR<SimilarproductsCreateInput, SimilarproductsUncheckedCreateInput>
  }

  /**
   * Similarproducts createMany
   */
  export type SimilarproductsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Similarproducts.
     */
    data: SimilarproductsCreateManyInput | SimilarproductsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Similarproducts update
   */
  export type SimilarproductsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Similarproducts
     */
    select?: SimilarproductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimilarproductsInclude<ExtArgs> | null
    /**
     * The data needed to update a Similarproducts.
     */
    data: XOR<SimilarproductsUpdateInput, SimilarproductsUncheckedUpdateInput>
    /**
     * Choose, which Similarproducts to update.
     */
    where: SimilarproductsWhereUniqueInput
  }

  /**
   * Similarproducts updateMany
   */
  export type SimilarproductsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Similarproducts.
     */
    data: XOR<SimilarproductsUpdateManyMutationInput, SimilarproductsUncheckedUpdateManyInput>
    /**
     * Filter which Similarproducts to update
     */
    where?: SimilarproductsWhereInput
  }

  /**
   * Similarproducts upsert
   */
  export type SimilarproductsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Similarproducts
     */
    select?: SimilarproductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimilarproductsInclude<ExtArgs> | null
    /**
     * The filter to search for the Similarproducts to update in case it exists.
     */
    where: SimilarproductsWhereUniqueInput
    /**
     * In case the Similarproducts found by the `where` argument doesn't exist, create a new Similarproducts with this data.
     */
    create: XOR<SimilarproductsCreateInput, SimilarproductsUncheckedCreateInput>
    /**
     * In case the Similarproducts was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SimilarproductsUpdateInput, SimilarproductsUncheckedUpdateInput>
  }

  /**
   * Similarproducts delete
   */
  export type SimilarproductsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Similarproducts
     */
    select?: SimilarproductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimilarproductsInclude<ExtArgs> | null
    /**
     * Filter which Similarproducts to delete.
     */
    where: SimilarproductsWhereUniqueInput
  }

  /**
   * Similarproducts deleteMany
   */
  export type SimilarproductsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Similarproducts to delete
     */
    where?: SimilarproductsWhereInput
  }

  /**
   * Similarproducts.Product
   */
  export type Similarproducts$ProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Productdetail
     */
    select?: ProductdetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductdetailInclude<ExtArgs> | null
    where?: ProductdetailWhereInput
  }

  /**
   * Similarproducts without action
   */
  export type SimilarproductsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Similarproducts
     */
    select?: SimilarproductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SimilarproductsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ProductScalarFieldEnum: {
    product_Id: 'product_Id',
    title: 'title',
    brand: 'brand',
    price: 'price',
    image_url: 'image_url',
    rating: 'rating'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const ProductdetailScalarFieldEnum: {
    productsdetailId: 'productsdetailId',
    title: 'title',
    image_url: 'image_url',
    style: 'style',
    rating: 'rating',
    brand: 'brand',
    price: 'price',
    description: 'description',
    total_reviews: 'total_reviews',
    availability: 'availability',
    product_Id: 'product_Id'
  };

  export type ProductdetailScalarFieldEnum = (typeof ProductdetailScalarFieldEnum)[keyof typeof ProductdetailScalarFieldEnum]


  export const SimilarproductsScalarFieldEnum: {
    id: 'id',
    title: 'title',
    image_url: 'image_url',
    style: 'style',
    rating: 'rating',
    price: 'price',
    brand: 'brand',
    description: 'description',
    total_reviews: 'total_reviews',
    availability: 'availability',
    productsdetailId: 'productsdetailId',
    product_Id: 'product_Id'
  };

  export type SimilarproductsScalarFieldEnum = (typeof SimilarproductsScalarFieldEnum)[keyof typeof SimilarproductsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    product_Id?: IntFilter<"Product"> | number
    title?: StringFilter<"Product"> | string
    brand?: StringFilter<"Product"> | string
    price?: IntFilter<"Product"> | number
    image_url?: StringFilter<"Product"> | string
    rating?: StringFilter<"Product"> | string
    Productdetail?: XOR<ProductdetailNullableRelationFilter, ProductdetailWhereInput> | null
  }

  export type ProductOrderByWithRelationInput = {
    product_Id?: SortOrder
    title?: SortOrder
    brand?: SortOrder
    price?: SortOrder
    image_url?: SortOrder
    rating?: SortOrder
    Productdetail?: ProductdetailOrderByWithRelationInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    product_Id?: number
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    title?: StringFilter<"Product"> | string
    brand?: StringFilter<"Product"> | string
    price?: IntFilter<"Product"> | number
    image_url?: StringFilter<"Product"> | string
    rating?: StringFilter<"Product"> | string
    Productdetail?: XOR<ProductdetailNullableRelationFilter, ProductdetailWhereInput> | null
  }, "product_Id" | "product_Id">

  export type ProductOrderByWithAggregationInput = {
    product_Id?: SortOrder
    title?: SortOrder
    brand?: SortOrder
    price?: SortOrder
    image_url?: SortOrder
    rating?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    product_Id?: IntWithAggregatesFilter<"Product"> | number
    title?: StringWithAggregatesFilter<"Product"> | string
    brand?: StringWithAggregatesFilter<"Product"> | string
    price?: IntWithAggregatesFilter<"Product"> | number
    image_url?: StringWithAggregatesFilter<"Product"> | string
    rating?: StringWithAggregatesFilter<"Product"> | string
  }

  export type ProductdetailWhereInput = {
    AND?: ProductdetailWhereInput | ProductdetailWhereInput[]
    OR?: ProductdetailWhereInput[]
    NOT?: ProductdetailWhereInput | ProductdetailWhereInput[]
    productsdetailId?: IntFilter<"Productdetail"> | number
    title?: StringFilter<"Productdetail"> | string
    image_url?: StringFilter<"Productdetail"> | string
    style?: StringFilter<"Productdetail"> | string
    rating?: StringFilter<"Productdetail"> | string
    brand?: StringFilter<"Productdetail"> | string
    price?: IntFilter<"Productdetail"> | number
    description?: StringFilter<"Productdetail"> | string
    total_reviews?: IntFilter<"Productdetail"> | number
    availability?: StringFilter<"Productdetail"> | string
    product_Id?: IntFilter<"Productdetail"> | number
    Product?: XOR<ProductNullableRelationFilter, ProductWhereInput> | null
    Similarproducts?: SimilarproductsListRelationFilter
  }

  export type ProductdetailOrderByWithRelationInput = {
    productsdetailId?: SortOrder
    title?: SortOrder
    image_url?: SortOrder
    style?: SortOrder
    rating?: SortOrder
    brand?: SortOrder
    price?: SortOrder
    description?: SortOrder
    total_reviews?: SortOrder
    availability?: SortOrder
    product_Id?: SortOrder
    Product?: ProductOrderByWithRelationInput
    Similarproducts?: SimilarproductsOrderByRelationAggregateInput
  }

  export type ProductdetailWhereUniqueInput = Prisma.AtLeast<{
    productsdetailId?: number
    product_Id?: number
    AND?: ProductdetailWhereInput | ProductdetailWhereInput[]
    OR?: ProductdetailWhereInput[]
    NOT?: ProductdetailWhereInput | ProductdetailWhereInput[]
    title?: StringFilter<"Productdetail"> | string
    image_url?: StringFilter<"Productdetail"> | string
    style?: StringFilter<"Productdetail"> | string
    rating?: StringFilter<"Productdetail"> | string
    brand?: StringFilter<"Productdetail"> | string
    price?: IntFilter<"Productdetail"> | number
    description?: StringFilter<"Productdetail"> | string
    total_reviews?: IntFilter<"Productdetail"> | number
    availability?: StringFilter<"Productdetail"> | string
    Product?: XOR<ProductNullableRelationFilter, ProductWhereInput> | null
    Similarproducts?: SimilarproductsListRelationFilter
  }, "productsdetailId" | "productsdetailId" | "product_Id">

  export type ProductdetailOrderByWithAggregationInput = {
    productsdetailId?: SortOrder
    title?: SortOrder
    image_url?: SortOrder
    style?: SortOrder
    rating?: SortOrder
    brand?: SortOrder
    price?: SortOrder
    description?: SortOrder
    total_reviews?: SortOrder
    availability?: SortOrder
    product_Id?: SortOrder
    _count?: ProductdetailCountOrderByAggregateInput
    _avg?: ProductdetailAvgOrderByAggregateInput
    _max?: ProductdetailMaxOrderByAggregateInput
    _min?: ProductdetailMinOrderByAggregateInput
    _sum?: ProductdetailSumOrderByAggregateInput
  }

  export type ProductdetailScalarWhereWithAggregatesInput = {
    AND?: ProductdetailScalarWhereWithAggregatesInput | ProductdetailScalarWhereWithAggregatesInput[]
    OR?: ProductdetailScalarWhereWithAggregatesInput[]
    NOT?: ProductdetailScalarWhereWithAggregatesInput | ProductdetailScalarWhereWithAggregatesInput[]
    productsdetailId?: IntWithAggregatesFilter<"Productdetail"> | number
    title?: StringWithAggregatesFilter<"Productdetail"> | string
    image_url?: StringWithAggregatesFilter<"Productdetail"> | string
    style?: StringWithAggregatesFilter<"Productdetail"> | string
    rating?: StringWithAggregatesFilter<"Productdetail"> | string
    brand?: StringWithAggregatesFilter<"Productdetail"> | string
    price?: IntWithAggregatesFilter<"Productdetail"> | number
    description?: StringWithAggregatesFilter<"Productdetail"> | string
    total_reviews?: IntWithAggregatesFilter<"Productdetail"> | number
    availability?: StringWithAggregatesFilter<"Productdetail"> | string
    product_Id?: IntWithAggregatesFilter<"Productdetail"> | number
  }

  export type SimilarproductsWhereInput = {
    AND?: SimilarproductsWhereInput | SimilarproductsWhereInput[]
    OR?: SimilarproductsWhereInput[]
    NOT?: SimilarproductsWhereInput | SimilarproductsWhereInput[]
    id?: IntFilter<"Similarproducts"> | number
    title?: StringFilter<"Similarproducts"> | string
    image_url?: StringFilter<"Similarproducts"> | string
    style?: StringFilter<"Similarproducts"> | string
    rating?: StringFilter<"Similarproducts"> | string
    price?: IntFilter<"Similarproducts"> | number
    brand?: StringFilter<"Similarproducts"> | string
    description?: StringFilter<"Similarproducts"> | string
    total_reviews?: IntFilter<"Similarproducts"> | number
    availability?: StringFilter<"Similarproducts"> | string
    productsdetailId?: IntFilter<"Similarproducts"> | number
    product_Id?: IntFilter<"Similarproducts"> | number
    Product?: XOR<ProductdetailNullableRelationFilter, ProductdetailWhereInput> | null
  }

  export type SimilarproductsOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    image_url?: SortOrder
    style?: SortOrder
    rating?: SortOrder
    price?: SortOrder
    brand?: SortOrder
    description?: SortOrder
    total_reviews?: SortOrder
    availability?: SortOrder
    productsdetailId?: SortOrder
    product_Id?: SortOrder
    Product?: ProductdetailOrderByWithRelationInput
  }

  export type SimilarproductsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    productsdetailId?: number
    product_Id?: number
    AND?: SimilarproductsWhereInput | SimilarproductsWhereInput[]
    OR?: SimilarproductsWhereInput[]
    NOT?: SimilarproductsWhereInput | SimilarproductsWhereInput[]
    title?: StringFilter<"Similarproducts"> | string
    image_url?: StringFilter<"Similarproducts"> | string
    style?: StringFilter<"Similarproducts"> | string
    rating?: StringFilter<"Similarproducts"> | string
    price?: IntFilter<"Similarproducts"> | number
    brand?: StringFilter<"Similarproducts"> | string
    description?: StringFilter<"Similarproducts"> | string
    total_reviews?: IntFilter<"Similarproducts"> | number
    availability?: StringFilter<"Similarproducts"> | string
    Product?: XOR<ProductdetailNullableRelationFilter, ProductdetailWhereInput> | null
  }, "id" | "id" | "productsdetailId" | "product_Id">

  export type SimilarproductsOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    image_url?: SortOrder
    style?: SortOrder
    rating?: SortOrder
    price?: SortOrder
    brand?: SortOrder
    description?: SortOrder
    total_reviews?: SortOrder
    availability?: SortOrder
    productsdetailId?: SortOrder
    product_Id?: SortOrder
    _count?: SimilarproductsCountOrderByAggregateInput
    _avg?: SimilarproductsAvgOrderByAggregateInput
    _max?: SimilarproductsMaxOrderByAggregateInput
    _min?: SimilarproductsMinOrderByAggregateInput
    _sum?: SimilarproductsSumOrderByAggregateInput
  }

  export type SimilarproductsScalarWhereWithAggregatesInput = {
    AND?: SimilarproductsScalarWhereWithAggregatesInput | SimilarproductsScalarWhereWithAggregatesInput[]
    OR?: SimilarproductsScalarWhereWithAggregatesInput[]
    NOT?: SimilarproductsScalarWhereWithAggregatesInput | SimilarproductsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Similarproducts"> | number
    title?: StringWithAggregatesFilter<"Similarproducts"> | string
    image_url?: StringWithAggregatesFilter<"Similarproducts"> | string
    style?: StringWithAggregatesFilter<"Similarproducts"> | string
    rating?: StringWithAggregatesFilter<"Similarproducts"> | string
    price?: IntWithAggregatesFilter<"Similarproducts"> | number
    brand?: StringWithAggregatesFilter<"Similarproducts"> | string
    description?: StringWithAggregatesFilter<"Similarproducts"> | string
    total_reviews?: IntWithAggregatesFilter<"Similarproducts"> | number
    availability?: StringWithAggregatesFilter<"Similarproducts"> | string
    productsdetailId?: IntWithAggregatesFilter<"Similarproducts"> | number
    product_Id?: IntWithAggregatesFilter<"Similarproducts"> | number
  }

  export type ProductCreateInput = {
    title: string
    brand: string
    price: number
    image_url: string
    rating: string
    Productdetail?: ProductdetailCreateNestedOneWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    product_Id?: number
    title: string
    brand: string
    price: number
    image_url: string
    rating: string
    Productdetail?: ProductdetailUncheckedCreateNestedOneWithoutProductInput
  }

  export type ProductUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    Productdetail?: ProductdetailUpdateOneWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    product_Id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    Productdetail?: ProductdetailUncheckedUpdateOneWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    product_Id?: number
    title: string
    brand: string
    price: number
    image_url: string
    rating: string
  }

  export type ProductUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
  }

  export type ProductUncheckedUpdateManyInput = {
    product_Id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
  }

  export type ProductdetailCreateInput = {
    title: string
    image_url: string
    style: string
    rating: string
    brand: string
    price: number
    description: string
    total_reviews: number
    availability: string
    Product?: ProductCreateNestedOneWithoutProductdetailInput
    Similarproducts?: SimilarproductsCreateNestedManyWithoutProductInput
  }

  export type ProductdetailUncheckedCreateInput = {
    productsdetailId?: number
    title: string
    image_url: string
    style: string
    rating: string
    brand: string
    price: number
    description: string
    total_reviews: number
    availability: string
    product_Id: number
    Similarproducts?: SimilarproductsUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductdetailUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    total_reviews?: IntFieldUpdateOperationsInput | number
    availability?: StringFieldUpdateOperationsInput | string
    Product?: ProductUpdateOneWithoutProductdetailNestedInput
    Similarproducts?: SimilarproductsUpdateManyWithoutProductNestedInput
  }

  export type ProductdetailUncheckedUpdateInput = {
    productsdetailId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    total_reviews?: IntFieldUpdateOperationsInput | number
    availability?: StringFieldUpdateOperationsInput | string
    product_Id?: IntFieldUpdateOperationsInput | number
    Similarproducts?: SimilarproductsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductdetailCreateManyInput = {
    productsdetailId?: number
    title: string
    image_url: string
    style: string
    rating: string
    brand: string
    price: number
    description: string
    total_reviews: number
    availability: string
    product_Id: number
  }

  export type ProductdetailUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    total_reviews?: IntFieldUpdateOperationsInput | number
    availability?: StringFieldUpdateOperationsInput | string
  }

  export type ProductdetailUncheckedUpdateManyInput = {
    productsdetailId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    total_reviews?: IntFieldUpdateOperationsInput | number
    availability?: StringFieldUpdateOperationsInput | string
    product_Id?: IntFieldUpdateOperationsInput | number
  }

  export type SimilarproductsCreateInput = {
    title: string
    image_url: string
    style: string
    rating: string
    price: number
    brand: string
    description: string
    total_reviews: number
    availability: string
    product_Id: number
    Product?: ProductdetailCreateNestedOneWithoutSimilarproductsInput
  }

  export type SimilarproductsUncheckedCreateInput = {
    id?: number
    title: string
    image_url: string
    style: string
    rating: string
    price: number
    brand: string
    description: string
    total_reviews: number
    availability: string
    productsdetailId: number
    product_Id: number
  }

  export type SimilarproductsUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    brand?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    total_reviews?: IntFieldUpdateOperationsInput | number
    availability?: StringFieldUpdateOperationsInput | string
    product_Id?: IntFieldUpdateOperationsInput | number
    Product?: ProductdetailUpdateOneWithoutSimilarproductsNestedInput
  }

  export type SimilarproductsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    brand?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    total_reviews?: IntFieldUpdateOperationsInput | number
    availability?: StringFieldUpdateOperationsInput | string
    productsdetailId?: IntFieldUpdateOperationsInput | number
    product_Id?: IntFieldUpdateOperationsInput | number
  }

  export type SimilarproductsCreateManyInput = {
    id?: number
    title: string
    image_url: string
    style: string
    rating: string
    price: number
    brand: string
    description: string
    total_reviews: number
    availability: string
    productsdetailId: number
    product_Id: number
  }

  export type SimilarproductsUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    brand?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    total_reviews?: IntFieldUpdateOperationsInput | number
    availability?: StringFieldUpdateOperationsInput | string
    product_Id?: IntFieldUpdateOperationsInput | number
  }

  export type SimilarproductsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    brand?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    total_reviews?: IntFieldUpdateOperationsInput | number
    availability?: StringFieldUpdateOperationsInput | string
    productsdetailId?: IntFieldUpdateOperationsInput | number
    product_Id?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type ProductdetailNullableRelationFilter = {
    is?: ProductdetailWhereInput | null
    isNot?: ProductdetailWhereInput | null
  }

  export type ProductCountOrderByAggregateInput = {
    product_Id?: SortOrder
    title?: SortOrder
    brand?: SortOrder
    price?: SortOrder
    image_url?: SortOrder
    rating?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    product_Id?: SortOrder
    price?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    product_Id?: SortOrder
    title?: SortOrder
    brand?: SortOrder
    price?: SortOrder
    image_url?: SortOrder
    rating?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    product_Id?: SortOrder
    title?: SortOrder
    brand?: SortOrder
    price?: SortOrder
    image_url?: SortOrder
    rating?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    product_Id?: SortOrder
    price?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type ProductNullableRelationFilter = {
    is?: ProductWhereInput | null
    isNot?: ProductWhereInput | null
  }

  export type SimilarproductsListRelationFilter = {
    every?: SimilarproductsWhereInput
    some?: SimilarproductsWhereInput
    none?: SimilarproductsWhereInput
  }

  export type SimilarproductsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductdetailCountOrderByAggregateInput = {
    productsdetailId?: SortOrder
    title?: SortOrder
    image_url?: SortOrder
    style?: SortOrder
    rating?: SortOrder
    brand?: SortOrder
    price?: SortOrder
    description?: SortOrder
    total_reviews?: SortOrder
    availability?: SortOrder
    product_Id?: SortOrder
  }

  export type ProductdetailAvgOrderByAggregateInput = {
    productsdetailId?: SortOrder
    price?: SortOrder
    total_reviews?: SortOrder
    product_Id?: SortOrder
  }

  export type ProductdetailMaxOrderByAggregateInput = {
    productsdetailId?: SortOrder
    title?: SortOrder
    image_url?: SortOrder
    style?: SortOrder
    rating?: SortOrder
    brand?: SortOrder
    price?: SortOrder
    description?: SortOrder
    total_reviews?: SortOrder
    availability?: SortOrder
    product_Id?: SortOrder
  }

  export type ProductdetailMinOrderByAggregateInput = {
    productsdetailId?: SortOrder
    title?: SortOrder
    image_url?: SortOrder
    style?: SortOrder
    rating?: SortOrder
    brand?: SortOrder
    price?: SortOrder
    description?: SortOrder
    total_reviews?: SortOrder
    availability?: SortOrder
    product_Id?: SortOrder
  }

  export type ProductdetailSumOrderByAggregateInput = {
    productsdetailId?: SortOrder
    price?: SortOrder
    total_reviews?: SortOrder
    product_Id?: SortOrder
  }

  export type SimilarproductsCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    image_url?: SortOrder
    style?: SortOrder
    rating?: SortOrder
    price?: SortOrder
    brand?: SortOrder
    description?: SortOrder
    total_reviews?: SortOrder
    availability?: SortOrder
    productsdetailId?: SortOrder
    product_Id?: SortOrder
  }

  export type SimilarproductsAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    total_reviews?: SortOrder
    productsdetailId?: SortOrder
    product_Id?: SortOrder
  }

  export type SimilarproductsMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    image_url?: SortOrder
    style?: SortOrder
    rating?: SortOrder
    price?: SortOrder
    brand?: SortOrder
    description?: SortOrder
    total_reviews?: SortOrder
    availability?: SortOrder
    productsdetailId?: SortOrder
    product_Id?: SortOrder
  }

  export type SimilarproductsMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    image_url?: SortOrder
    style?: SortOrder
    rating?: SortOrder
    price?: SortOrder
    brand?: SortOrder
    description?: SortOrder
    total_reviews?: SortOrder
    availability?: SortOrder
    productsdetailId?: SortOrder
    product_Id?: SortOrder
  }

  export type SimilarproductsSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    total_reviews?: SortOrder
    productsdetailId?: SortOrder
    product_Id?: SortOrder
  }

  export type ProductdetailCreateNestedOneWithoutProductInput = {
    create?: XOR<ProductdetailCreateWithoutProductInput, ProductdetailUncheckedCreateWithoutProductInput>
    connectOrCreate?: ProductdetailCreateOrConnectWithoutProductInput
    connect?: ProductdetailWhereUniqueInput
  }

  export type ProductdetailUncheckedCreateNestedOneWithoutProductInput = {
    create?: XOR<ProductdetailCreateWithoutProductInput, ProductdetailUncheckedCreateWithoutProductInput>
    connectOrCreate?: ProductdetailCreateOrConnectWithoutProductInput
    connect?: ProductdetailWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProductdetailUpdateOneWithoutProductNestedInput = {
    create?: XOR<ProductdetailCreateWithoutProductInput, ProductdetailUncheckedCreateWithoutProductInput>
    connectOrCreate?: ProductdetailCreateOrConnectWithoutProductInput
    upsert?: ProductdetailUpsertWithoutProductInput
    disconnect?: ProductdetailWhereInput | boolean
    delete?: ProductdetailWhereInput | boolean
    connect?: ProductdetailWhereUniqueInput
    update?: XOR<XOR<ProductdetailUpdateToOneWithWhereWithoutProductInput, ProductdetailUpdateWithoutProductInput>, ProductdetailUncheckedUpdateWithoutProductInput>
  }

  export type ProductdetailUncheckedUpdateOneWithoutProductNestedInput = {
    create?: XOR<ProductdetailCreateWithoutProductInput, ProductdetailUncheckedCreateWithoutProductInput>
    connectOrCreate?: ProductdetailCreateOrConnectWithoutProductInput
    upsert?: ProductdetailUpsertWithoutProductInput
    disconnect?: ProductdetailWhereInput | boolean
    delete?: ProductdetailWhereInput | boolean
    connect?: ProductdetailWhereUniqueInput
    update?: XOR<XOR<ProductdetailUpdateToOneWithWhereWithoutProductInput, ProductdetailUpdateWithoutProductInput>, ProductdetailUncheckedUpdateWithoutProductInput>
  }

  export type ProductCreateNestedOneWithoutProductdetailInput = {
    create?: XOR<ProductCreateWithoutProductdetailInput, ProductUncheckedCreateWithoutProductdetailInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProductdetailInput
    connect?: ProductWhereUniqueInput
  }

  export type SimilarproductsCreateNestedManyWithoutProductInput = {
    create?: XOR<SimilarproductsCreateWithoutProductInput, SimilarproductsUncheckedCreateWithoutProductInput> | SimilarproductsCreateWithoutProductInput[] | SimilarproductsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: SimilarproductsCreateOrConnectWithoutProductInput | SimilarproductsCreateOrConnectWithoutProductInput[]
    createMany?: SimilarproductsCreateManyProductInputEnvelope
    connect?: SimilarproductsWhereUniqueInput | SimilarproductsWhereUniqueInput[]
  }

  export type SimilarproductsUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<SimilarproductsCreateWithoutProductInput, SimilarproductsUncheckedCreateWithoutProductInput> | SimilarproductsCreateWithoutProductInput[] | SimilarproductsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: SimilarproductsCreateOrConnectWithoutProductInput | SimilarproductsCreateOrConnectWithoutProductInput[]
    createMany?: SimilarproductsCreateManyProductInputEnvelope
    connect?: SimilarproductsWhereUniqueInput | SimilarproductsWhereUniqueInput[]
  }

  export type ProductUpdateOneWithoutProductdetailNestedInput = {
    create?: XOR<ProductCreateWithoutProductdetailInput, ProductUncheckedCreateWithoutProductdetailInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProductdetailInput
    upsert?: ProductUpsertWithoutProductdetailInput
    disconnect?: ProductWhereInput | boolean
    delete?: ProductWhereInput | boolean
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutProductdetailInput, ProductUpdateWithoutProductdetailInput>, ProductUncheckedUpdateWithoutProductdetailInput>
  }

  export type SimilarproductsUpdateManyWithoutProductNestedInput = {
    create?: XOR<SimilarproductsCreateWithoutProductInput, SimilarproductsUncheckedCreateWithoutProductInput> | SimilarproductsCreateWithoutProductInput[] | SimilarproductsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: SimilarproductsCreateOrConnectWithoutProductInput | SimilarproductsCreateOrConnectWithoutProductInput[]
    upsert?: SimilarproductsUpsertWithWhereUniqueWithoutProductInput | SimilarproductsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: SimilarproductsCreateManyProductInputEnvelope
    set?: SimilarproductsWhereUniqueInput | SimilarproductsWhereUniqueInput[]
    disconnect?: SimilarproductsWhereUniqueInput | SimilarproductsWhereUniqueInput[]
    delete?: SimilarproductsWhereUniqueInput | SimilarproductsWhereUniqueInput[]
    connect?: SimilarproductsWhereUniqueInput | SimilarproductsWhereUniqueInput[]
    update?: SimilarproductsUpdateWithWhereUniqueWithoutProductInput | SimilarproductsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: SimilarproductsUpdateManyWithWhereWithoutProductInput | SimilarproductsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: SimilarproductsScalarWhereInput | SimilarproductsScalarWhereInput[]
  }

  export type SimilarproductsUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<SimilarproductsCreateWithoutProductInput, SimilarproductsUncheckedCreateWithoutProductInput> | SimilarproductsCreateWithoutProductInput[] | SimilarproductsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: SimilarproductsCreateOrConnectWithoutProductInput | SimilarproductsCreateOrConnectWithoutProductInput[]
    upsert?: SimilarproductsUpsertWithWhereUniqueWithoutProductInput | SimilarproductsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: SimilarproductsCreateManyProductInputEnvelope
    set?: SimilarproductsWhereUniqueInput | SimilarproductsWhereUniqueInput[]
    disconnect?: SimilarproductsWhereUniqueInput | SimilarproductsWhereUniqueInput[]
    delete?: SimilarproductsWhereUniqueInput | SimilarproductsWhereUniqueInput[]
    connect?: SimilarproductsWhereUniqueInput | SimilarproductsWhereUniqueInput[]
    update?: SimilarproductsUpdateWithWhereUniqueWithoutProductInput | SimilarproductsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: SimilarproductsUpdateManyWithWhereWithoutProductInput | SimilarproductsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: SimilarproductsScalarWhereInput | SimilarproductsScalarWhereInput[]
  }

  export type ProductdetailCreateNestedOneWithoutSimilarproductsInput = {
    create?: XOR<ProductdetailCreateWithoutSimilarproductsInput, ProductdetailUncheckedCreateWithoutSimilarproductsInput>
    connectOrCreate?: ProductdetailCreateOrConnectWithoutSimilarproductsInput
    connect?: ProductdetailWhereUniqueInput
  }

  export type ProductdetailUpdateOneWithoutSimilarproductsNestedInput = {
    create?: XOR<ProductdetailCreateWithoutSimilarproductsInput, ProductdetailUncheckedCreateWithoutSimilarproductsInput>
    connectOrCreate?: ProductdetailCreateOrConnectWithoutSimilarproductsInput
    upsert?: ProductdetailUpsertWithoutSimilarproductsInput
    disconnect?: ProductdetailWhereInput | boolean
    delete?: ProductdetailWhereInput | boolean
    connect?: ProductdetailWhereUniqueInput
    update?: XOR<XOR<ProductdetailUpdateToOneWithWhereWithoutSimilarproductsInput, ProductdetailUpdateWithoutSimilarproductsInput>, ProductdetailUncheckedUpdateWithoutSimilarproductsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type ProductdetailCreateWithoutProductInput = {
    title: string
    image_url: string
    style: string
    rating: string
    brand: string
    price: number
    description: string
    total_reviews: number
    availability: string
    Similarproducts?: SimilarproductsCreateNestedManyWithoutProductInput
  }

  export type ProductdetailUncheckedCreateWithoutProductInput = {
    productsdetailId?: number
    title: string
    image_url: string
    style: string
    rating: string
    brand: string
    price: number
    description: string
    total_reviews: number
    availability: string
    Similarproducts?: SimilarproductsUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductdetailCreateOrConnectWithoutProductInput = {
    where: ProductdetailWhereUniqueInput
    create: XOR<ProductdetailCreateWithoutProductInput, ProductdetailUncheckedCreateWithoutProductInput>
  }

  export type ProductdetailUpsertWithoutProductInput = {
    update: XOR<ProductdetailUpdateWithoutProductInput, ProductdetailUncheckedUpdateWithoutProductInput>
    create: XOR<ProductdetailCreateWithoutProductInput, ProductdetailUncheckedCreateWithoutProductInput>
    where?: ProductdetailWhereInput
  }

  export type ProductdetailUpdateToOneWithWhereWithoutProductInput = {
    where?: ProductdetailWhereInput
    data: XOR<ProductdetailUpdateWithoutProductInput, ProductdetailUncheckedUpdateWithoutProductInput>
  }

  export type ProductdetailUpdateWithoutProductInput = {
    title?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    total_reviews?: IntFieldUpdateOperationsInput | number
    availability?: StringFieldUpdateOperationsInput | string
    Similarproducts?: SimilarproductsUpdateManyWithoutProductNestedInput
  }

  export type ProductdetailUncheckedUpdateWithoutProductInput = {
    productsdetailId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    total_reviews?: IntFieldUpdateOperationsInput | number
    availability?: StringFieldUpdateOperationsInput | string
    Similarproducts?: SimilarproductsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateWithoutProductdetailInput = {
    title: string
    brand: string
    price: number
    image_url: string
    rating: string
  }

  export type ProductUncheckedCreateWithoutProductdetailInput = {
    product_Id?: number
    title: string
    brand: string
    price: number
    image_url: string
    rating: string
  }

  export type ProductCreateOrConnectWithoutProductdetailInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutProductdetailInput, ProductUncheckedCreateWithoutProductdetailInput>
  }

  export type SimilarproductsCreateWithoutProductInput = {
    title: string
    image_url: string
    style: string
    rating: string
    price: number
    brand: string
    description: string
    total_reviews: number
    availability: string
    product_Id: number
  }

  export type SimilarproductsUncheckedCreateWithoutProductInput = {
    id?: number
    title: string
    image_url: string
    style: string
    rating: string
    price: number
    brand: string
    description: string
    total_reviews: number
    availability: string
    product_Id: number
  }

  export type SimilarproductsCreateOrConnectWithoutProductInput = {
    where: SimilarproductsWhereUniqueInput
    create: XOR<SimilarproductsCreateWithoutProductInput, SimilarproductsUncheckedCreateWithoutProductInput>
  }

  export type SimilarproductsCreateManyProductInputEnvelope = {
    data: SimilarproductsCreateManyProductInput | SimilarproductsCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type ProductUpsertWithoutProductdetailInput = {
    update: XOR<ProductUpdateWithoutProductdetailInput, ProductUncheckedUpdateWithoutProductdetailInput>
    create: XOR<ProductCreateWithoutProductdetailInput, ProductUncheckedCreateWithoutProductdetailInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutProductdetailInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutProductdetailInput, ProductUncheckedUpdateWithoutProductdetailInput>
  }

  export type ProductUpdateWithoutProductdetailInput = {
    title?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
  }

  export type ProductUncheckedUpdateWithoutProductdetailInput = {
    product_Id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
  }

  export type SimilarproductsUpsertWithWhereUniqueWithoutProductInput = {
    where: SimilarproductsWhereUniqueInput
    update: XOR<SimilarproductsUpdateWithoutProductInput, SimilarproductsUncheckedUpdateWithoutProductInput>
    create: XOR<SimilarproductsCreateWithoutProductInput, SimilarproductsUncheckedCreateWithoutProductInput>
  }

  export type SimilarproductsUpdateWithWhereUniqueWithoutProductInput = {
    where: SimilarproductsWhereUniqueInput
    data: XOR<SimilarproductsUpdateWithoutProductInput, SimilarproductsUncheckedUpdateWithoutProductInput>
  }

  export type SimilarproductsUpdateManyWithWhereWithoutProductInput = {
    where: SimilarproductsScalarWhereInput
    data: XOR<SimilarproductsUpdateManyMutationInput, SimilarproductsUncheckedUpdateManyWithoutProductInput>
  }

  export type SimilarproductsScalarWhereInput = {
    AND?: SimilarproductsScalarWhereInput | SimilarproductsScalarWhereInput[]
    OR?: SimilarproductsScalarWhereInput[]
    NOT?: SimilarproductsScalarWhereInput | SimilarproductsScalarWhereInput[]
    id?: IntFilter<"Similarproducts"> | number
    title?: StringFilter<"Similarproducts"> | string
    image_url?: StringFilter<"Similarproducts"> | string
    style?: StringFilter<"Similarproducts"> | string
    rating?: StringFilter<"Similarproducts"> | string
    price?: IntFilter<"Similarproducts"> | number
    brand?: StringFilter<"Similarproducts"> | string
    description?: StringFilter<"Similarproducts"> | string
    total_reviews?: IntFilter<"Similarproducts"> | number
    availability?: StringFilter<"Similarproducts"> | string
    productsdetailId?: IntFilter<"Similarproducts"> | number
    product_Id?: IntFilter<"Similarproducts"> | number
  }

  export type ProductdetailCreateWithoutSimilarproductsInput = {
    title: string
    image_url: string
    style: string
    rating: string
    brand: string
    price: number
    description: string
    total_reviews: number
    availability: string
    Product?: ProductCreateNestedOneWithoutProductdetailInput
  }

  export type ProductdetailUncheckedCreateWithoutSimilarproductsInput = {
    productsdetailId?: number
    title: string
    image_url: string
    style: string
    rating: string
    brand: string
    price: number
    description: string
    total_reviews: number
    availability: string
    product_Id: number
  }

  export type ProductdetailCreateOrConnectWithoutSimilarproductsInput = {
    where: ProductdetailWhereUniqueInput
    create: XOR<ProductdetailCreateWithoutSimilarproductsInput, ProductdetailUncheckedCreateWithoutSimilarproductsInput>
  }

  export type ProductdetailUpsertWithoutSimilarproductsInput = {
    update: XOR<ProductdetailUpdateWithoutSimilarproductsInput, ProductdetailUncheckedUpdateWithoutSimilarproductsInput>
    create: XOR<ProductdetailCreateWithoutSimilarproductsInput, ProductdetailUncheckedCreateWithoutSimilarproductsInput>
    where?: ProductdetailWhereInput
  }

  export type ProductdetailUpdateToOneWithWhereWithoutSimilarproductsInput = {
    where?: ProductdetailWhereInput
    data: XOR<ProductdetailUpdateWithoutSimilarproductsInput, ProductdetailUncheckedUpdateWithoutSimilarproductsInput>
  }

  export type ProductdetailUpdateWithoutSimilarproductsInput = {
    title?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    total_reviews?: IntFieldUpdateOperationsInput | number
    availability?: StringFieldUpdateOperationsInput | string
    Product?: ProductUpdateOneWithoutProductdetailNestedInput
  }

  export type ProductdetailUncheckedUpdateWithoutSimilarproductsInput = {
    productsdetailId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    total_reviews?: IntFieldUpdateOperationsInput | number
    availability?: StringFieldUpdateOperationsInput | string
    product_Id?: IntFieldUpdateOperationsInput | number
  }

  export type SimilarproductsCreateManyProductInput = {
    id?: number
    title: string
    image_url: string
    style: string
    rating: string
    price: number
    brand: string
    description: string
    total_reviews: number
    availability: string
    product_Id: number
  }

  export type SimilarproductsUpdateWithoutProductInput = {
    title?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    brand?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    total_reviews?: IntFieldUpdateOperationsInput | number
    availability?: StringFieldUpdateOperationsInput | string
    product_Id?: IntFieldUpdateOperationsInput | number
  }

  export type SimilarproductsUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    brand?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    total_reviews?: IntFieldUpdateOperationsInput | number
    availability?: StringFieldUpdateOperationsInput | string
    product_Id?: IntFieldUpdateOperationsInput | number
  }

  export type SimilarproductsUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    image_url?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    rating?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    brand?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    total_reviews?: IntFieldUpdateOperationsInput | number
    availability?: StringFieldUpdateOperationsInput | string
    product_Id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ProductdetailCountOutputTypeDefaultArgs instead
     */
    export type ProductdetailCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductdetailCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductDefaultArgs instead
     */
    export type ProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductdetailDefaultArgs instead
     */
    export type ProductdetailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductdetailDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SimilarproductsDefaultArgs instead
     */
    export type SimilarproductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SimilarproductsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}